<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_orc_idle_down</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>str = 4;
intel = 2;
agi = 2;
alive = true;
speed = 0;

hpmax = (str * 2) + floor(intel * 1.33) + floor(agi * 1.5);
hp = hpmax;
hppercent = 100;

mana = intel * 2;
image_speed = .5;

wait = 0;


dir = "down";
state = "peaceful";
substate = "idle";
animating = false;
animatetimer= 0;
last_sprite = 0;
target = -1;
attacktimer = 0;

depth = -y;


//hitbox and hurtbox code

//hurtbox
hurtbox = scr_create_hurtbox(26,48,-13,-20);

//hitbox
hitbox = -1;

hit = false;
hitStun = 0;
hitBy = -1;

damageInst = 0;

damagePending = 0;
thrownUp = false;
thrownDown = false;
thrownRight = false;
thrownLeft = false;
thrownCounter = 20;

//add to p1_enemies list

ds_list_add(global.p1_enemies, self);





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//hurtbox
with(hurtbox){
    x = other.x + xOffset;
    y = other.y + yOffset;
}

//hitbox
if(hitbox != -1){
    with(hitbox){
        x = other.x + xOffset;
        y = other.y + yOffset;

        //check to see if the hurtbox is touching your hitbox        
        with(obj_hurtbox){
            if(place_meeting(x,y,other) &amp;&amp; other.owner != owner){
                //ignore check
                //checking collision from the hitbox object
                with(other){
                    //check to see if your target is on the ignore list
                    //if it is on the ignore list, dont hit it again
                    for(i = 0; i &lt; ds_list_size(ignoreList); i ++){
                        if(ignoreList[|i] = other.owner){
                            ignore = true;
                            break;
                        }
                    }

                    //if it is NOT on the ignore list, hit it, and add it to
                    //the ignore list
                    if(!ignore){
                        other.owner.hit = true;
                        other.owner.hitBy = id;
                        other.owner.damagePending = damage;
                        ds_list_add(ignoreList,other.owner);
                    
                    }
                }
            }
        }
    }
}

if (hit == true)
{

hitStun = 10;
hit = false;
audio_play_sound(swordhit, 6, false);
hp = hp - damagePending;

}

if (hitStun &gt; 0)

{
substate = "stun";
hitStun = hitStun - 1;
speed = 0;




//hitstun animation
 if (direction &gt; 315 or direction &lt;= 45)
        {
        dir = "right";
        sprite_index  = spr_orc_hit_right;
        }
        
    if (direction &gt; 45 and direction &lt;= 135)
        {
        dir = "up";
        sprite_index = spr_orc_hit_up;
        }
        
    if (direction &gt; 135 and direction &lt;= 225)
        {
        dir = "left";
        sprite_index = spr_orc_hit_left;
        }
        
    if (direction &gt; 225 and direction &lt;= 315)
        {
        dir = "down";
        sprite_index = spr_orc_hit_down;
        }



    if(hitStun == 0) {
    
        substate = "idle";
    
    }
}

if(hp &lt;1 and substate != "dead")
    {
    image_speed = .25;
    sprite_index = spr_orc_death;
    alive = false;
    speed = 0;
    substate = "dead";

    }
    
if (alive == false)
    {
    if (image_index == 5)
        {
            image_speed = 0;
            friction = 10;
        }
    }
    
if (alive == false)
    {
        
    for(i = 0; i &lt; ds_list_size(global.p1_enemies); i++)
        {
        if(self == ds_list_find_value(global.p1_enemies, i))
            {
            ds_list_delete(global.p1_enemies, i);
            }
        }
    
    }
    
    
for (i = 0; i &lt; ds_list_size(global.player_units); i++)
    {
    if (distance_to_object(ds_list_find_value(global.player_units,i)) &lt; 100)
        {
    state = "aggro";
    target = ds_list_find_value(global.player_units,i);
        }
    }
    
if (state == "peaceful") {
        script_execute(scr_wander, 180, 7);
        if(speed &gt; 0) {speed = speed - 1;}
    }
    
    
if (animatetimer &gt; 0)
    {
    animatetimer = animatetimer - 1;
    }
    
if(animatetimer &lt; 1)
    {
    animatetimer = 0;
    animating = false;
    }

if (last_sprite != sprite_index) {
   image_index = 0;
   last_sprite = sprite_index;
}

if (substate == "attacking" &amp;&amp; image_index == 4)
    {
    hitbox = script_execute(scr_create_hitbox, dir, 10, 20, 60, str);
    }
    
//change sprite from attacking sprite

if(attacktimer &gt; 0 and substate == "attacking")
    {
    attacktimer = attacktimer - 1;
    }
    
if (attacktimer &lt; 1 and substate == "attacking")
    {
    substate = "gaurd";
    }
    
if(distance_to_object(Testp1) &lt;15)
        {
        x = xprevious;
        y = yprevious;
        }
        
    //set hp percentage    
hppercent = (hp/hpmax) * 100;
if (substate == "dead") {solid = false;}

//----------------
//When Thrown
//---------------------
if(thrownCounter &gt; 0){


if(thrownUp){
    y = y - 4;
}
if(thrownDown){
    y = y + 4;
}
if(thrownLeft){
    x = x - 4;
}
if(thrownRight){
    x = x + 4;
}
    thrownCounter = thrownCounter - 1;
    
    if(thrownCounter == 0) {
    
    if(thrownUp and !place_free(x, y - 1)){
     hitStun = hitStun + 60;
     audio_play_sound(wallSplat, 6, 0);
    }
    if(thrownDown and !place_free(x, y + 1)){
     hitStun = hitStun + 60;
     audio_play_sound(wallSplat, 6, 0);
    }
    if(thrownLeft and !place_free(x - 1, y)){
     hitStun = hitStun + 60;
     audio_play_sound(wallSplat, 6, 0);
    }
    if(thrownRight and !place_free(x + 1, y)){
     hitStun = hitStun + 60;
     audio_play_sound(wallSplat, 6, 0);
    }
    
    thrownUp = false;
    thrownDown = false;
    thrownRight = false;
    thrownLeft = false;
    }
    
}


//disallow this object to occupy the same place as other solid objects

if(!place_free(xprevious,y)){
    
    y = yprevious;
 
    } 
if(!place_free(x,yprevious)){
    
    x = xprevious;
     
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;

target_x = Testp1.x;
target_y = Testp1.y;
if(alive){
if ( state == "aggro") 
    {
    direction = point_direction(x, y, target_x, target_y);
    }



if (substate != "attacking")
    {
     if (direction &gt; 315 or direction &lt;= 45)
        {
        dir = "right";
        sprite_index  = spr_orc_walk_right;
        }
        
    if (direction &gt; 45 and direction &lt;= 135)
        {
        dir = "up";
        sprite_index = spr_orc_walk_up;
        }
        
    if (direction &gt; 135 and direction &lt;= 225)
        {
        dir = "left";
        sprite_index = spr_orc_walk_left;
        }
        
    if (direction &gt; 225 and direction &lt;= 315)
        {
        dir = "down";
        sprite_index = spr_orc_walk_down;
        }
    
    

if (hitStun == 0 and !animating ){
    if( distance_to_object(Testp1) &gt; 10 and state == "aggro"){
    speed = 1;

    }

    
    
    }
    
        }
        
for(i = 0; i &lt;ds_list_size(global.player_units);i++) {
    
    if (distance_to_object(ds_list_find_value(global.player_units,i))&lt;30 and !animating)
    
    {
        speed = 7;
        animating = true;
        animatetimer= irandom_range(30,60);
      
        substate = "attacking";
        attacktimer = 24;
    
     if (direction &gt; 315 or direction &lt;= 45)
        {
        sprite_index = spr_orc_attack_right;
        image_speed = .25;
        }
        
    if (direction &gt; 45 and direction &lt;= 135)
        {
         sprite_index = spr_orc_attack_up;
        image_speed = .25;
        }
        
    if (direction &gt; 135 and direction &lt;= 225)
        {
         sprite_index = spr_orc_attack_left;
        image_speed = .25;
        }
        
    if (direction &gt; 225 and direction &lt;= 315)
        {
         sprite_index = spr_orc_attack_down;
        image_speed = .25;
        }
        
        
    } 
}
}   
    
    if(speed &gt; 1) {speed = speed -1;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_shadow, 1, x, y+15, .6, .8, 0, c_black, 0.5);
draw_self();
if(alive) {
   draw_healthbar(x - 20, y - 40, x + 20, y - 35, hppercent, c_black, c_red, c_green, 0, true, true);
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
